import asyncio
import logging
import os
from datetime import timedelta
import aiogram
from aiogram import types, Bot
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile, InputFile
from asgiref.sync import sync_to_async
from django.core.wsgi import get_wsgi_application
from django.db.models.fields.files import ImageFieldFile
from django.utils import timezone
from keyboard import *

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "shop.settings")
application = get_wsgi_application()
from aiogram.fsm.storage.memory import MemoryStorage

from orders.models import *
from Const import *

8
router = aiogram.Router()

logging.basicConfig(level=logging.INFO)

dp.include_router(router)


def generate_keyboard():
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ø–∏—Å–∫—É
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=group_name) for group_name, _ in Category.GROUP_CHOICES],
            [KeyboardButton(text="–ö–æ—à–∏–∫")],
        ], resize_keyboard=True)


@router.message(CommandStart())
async def send_product_categories(message: types.Message):
    keyboard = generate_keyboard()
    oferty = "https://docs.google.com/document/d/1kB2ImYMpkT27CoGFwWc4iN8RiaHVkA6j/edit?usp=drive_link&ouid=104641872811576473426&rtpof=true&sd=true"
    pol = "https://docs.google.com/document/d/1rtdO74ls75eoXeJI2jSuYJlD-d-4R3GX/edit?usp=drive_link&ouid=104641872811576473426&rtpof=true&sd=true"
    pyblic_dogovir = "https://docs.google.com/document/d/14JoVCWfNzlRtA-BnxYAOJdDtNPq8ZhG2/edit?usp=drive_link&ouid=104641872811576473426&rtpof=true&sd=true"
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=FSInputFile("photo_2025-02-19_00-31-25.jpg"),
        caption=f"""<b>–ü—Ä–∏–≤—ñ—Ç!</b> ü´ô –í–∏ –≤ <b>Digital Jar</b> ‚Äì —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ñ, –¥–µ –∫–æ–∂–µ–Ω —Ç–æ–≤–∞—Ä –≤ –∫—ñ–ª—å–∫–æ—Ö –∫–ª—ñ–∫–∞—Ö. 
        <i>–ü–æ—à—É–∫, –ø–æ–∫—É–ø–∫–∞, –æ–ø–ª–∞—Ç–∞ ‚Äì –≤—Å–µ —ñ–Ω—Ç—É—ó—Ç–∏–≤–Ω–æ –∑—Ä–æ–∑—É–º—ñ–ª–æ.</i> –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ ‚Äì –ø–∏—à—ñ—Ç—å, –º–∏ –Ω–∞ –∑–≤'—è–∑–∫—É. ü§ù
        <b>–ó–∞–¥—ñ–¥–∂–∞—Ä–∏–º–æ —Ä–∞–∑–æ–º!</b> 

        üìú <b>–î–æ–≥–æ–≤—ñ—Ä –æ—Ñ–µ—Ä—Ç–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è:</b> 
        <a href="{oferty}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –¥–æ–≥–æ–≤–æ—Ä—É –æ—Ñ–µ—Ä—Ç–∏</a>

        üîí <b>–ü–æ–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ:</b> 
        <a href="{pol}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–ª—ñ—Ç–∏–∫–∏</a>

        üìÉ <b>–ü–£–ë–õ–Ü–ß–ù–ò–ô –î–û–ì–û–í–Ü–† –ö–û–ú–Ü–°–Ü–á:</b>
        <a href="{pyblic_dogovir}">–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –¥–æ–≥–æ–≤–æ—Ä—É</a>""",
        parse_mode='HTML'  # Use HTML parsing mode for formatting
    )

    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:", reply_markup=keyboard)


@router.callback_query(lambda call: call.data.startswith('product_'))
async def handle_product_selection(call: types.CallbackQuery):
    product_id = int(call.data.split("_")[-1])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞ üõí", callback_data=f"add_to_cart_{product_id}")
            ]
        ]
    )
    # Fetch product using sync_to_async
    logger = logging.getLogger(__name__)

    try:
        product = await sync_to_async(Product.objects.get, thread_sensitive=True)(id=product_id)
    except Product.DoesNotExist:
        logger.error(f"–ü—Ä–æ–¥—É–∫—Ç —ñ–∑ ID {product_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await bot.send_message(call.message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π.")
        return
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–¥—É–∫—Ç—É
    await bot.send_photo(chat_id=call.message.chat.id, photo=FSInputFile(product.photo.path),
                         caption=f"–¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω\n–¢–æ–≤–∞—Ä: {product.name}\n {product.description}",
                         reply_markup=keyboard)


@router.callback_query(lambda call: call.data.startswith('category_'))
async def productv(call: types.CallbackQuery):
    category = call.data.split("_")[-1]
    products = await sync_to_async(list)(Product.objects.filter(category_id=category))

    if not products:
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=product.name, callback_data=f"product_{product.id}")]
        for product in products
    ])
    await bot.send_message(call.message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=keyboard)


@router.callback_query(lambda call: call.data.startswith("add_to_cart_"))
async def handle_add_to_cart(call: types.CallbackQuery):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ ID –ø—Ä–æ–¥—É–∫—Ç—É
        product_id = int(call.data.split("_")[-1])
        user_id = call.from_user.id

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–¥—É–∫—Ç –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        product = await sync_to_async(Product.objects.get, thread_sensitive=True)(id=product_id)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        try:
            user = await sync_to_async(CustomUser.objects.get, thread_sensitive=True)(telegram_id=user_id,
                                                                                      username=call.from_user.username)
        except CustomUser.DoesNotExist:
            user = await sync_to_async(CustomUser.objects.create, thread_sensitive=True)(telegram_id=user_id,
                                                                                         username=call.from_user.username)
        cart, created = await sync_to_async(Cart.objects.get_or_create, thread_sensitive=True)(user=user)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–¥—É–∫—Ç –≤–∂–µ —î –≤ –∫–æ—à–∏–∫—É
        cart_item, item_created = await sync_to_async(CartItem.objects.get_or_create, thread_sensitive=True)(
            cart=cart,
            product=product
        )

        if not item_created:
            # –Ø–∫—â–æ –ø—Ä–æ–¥—É–∫—Ç –≤–∂–µ —î, –∑–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            cart_item.quantity += 1
            await sync_to_async(cart_item.save, thread_sensitive=True)()

        await call.answer(f"–ü—Ä–æ–¥—É–∫—Ç '{product.name}' –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—à–∏–∫–∞!", show_alert=True)

    except Product.DoesNotExist:
        await call.answer("–ü—Ä–æ–¥—É–∫—Ç –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")


@router.callback_query(lambda call: call.data.startswith("remove_"))
async def remove_item_from_cart(call: types.CallbackQuery):
    # –û—Ç—Ä–∏–º—É—î–º–æ ID —Ç–æ–≤–∞—Ä—É –∑ callback data
    cart_item_id = int(call.data.split("_")[1])

    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–≤–∞—Ä —ñ–∑ –∫–æ—à–∏–∫–∞
    await sync_to_async(CartItem.objects.filter(id=cart_item_id).delete)()

    await call.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–æ—à–∏–∫–∞!")
    await show_cart(call.message)  # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—à–∏–∫


@router.callback_query(lambda call: call.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_cart = await sync_to_async(Cart.objects.filter(user__telegram_id=user_id).first)()

    if user_cart:
        await sync_to_async(user_cart.cartitems.all().delete)()
        await call.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ!")
        await call.message.edit_text("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        await call.answer("–í–∞—à –∫–æ—à–∏–∫ –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π!")


@router.callback_query(lambda call: call.data == "checkout")
async def checkout_cart(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_cart = await sync_to_async(
        Cart.objects.prefetch_related('cartitems__product').filter(user__telegram_id=user_id).first)()

    if not user_cart or not user_cart.cartitems.exists():
        await call.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return

    # –õ–æ–≥—ñ–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    total_sum = user_cart.total_price()
    await call.message.edit_text(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total_sum} –≥—Ä–Ω")

    # –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
    await sync_to_async(user_cart.cartitems.all().delete)()


# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫–∞"
@router.message(lambda message: message.text == "–ö–æ—à–∏–∫")
async def show_cart(message: aiogram.types.Message):
    user_id = message.from_user.id  # –æ—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—à–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = message.from_user.id
    user_cart = await sync_to_async(
        Cart.objects.prefetch_related('cartitems__product').filter(user__telegram_id=user_id).first)()

    if not user_cart or not user_cart.cartitems.exists():
        await message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
    cart_text = "–í–∞—à –∫–æ—à–∏–∫:\n"

    for item in user_cart.cartitems.all():
        cart_text += f"{item.product.name} - {item.quantity} x {item.product.price} –≥—Ä–Ω = {item.total_price()} –≥—Ä–Ω\n"
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"–í–∏–¥–∞–ª–∏—Ç–∏ {item.product.name}",
                    callback_data=f"remove_{item.id}"
                )], [
                    InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="checkout")
                    , InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫", callback_data="clear_cart")]
            ]
        )

    cart_text += f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {user_cart.total_price()} –≥—Ä–Ω"

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞
    await message.answer(cart_text, reply_markup=keyboard)


@router.message(lambda message: message.text in ["–ü—Ä–æ–¥—É–∫—Ç–∏", "–Ü–Ω—à–µ"])
async def menu(message: types.Message):
    category = message.text

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–∏—à–µ –≤–∏–¥–∏–º—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    visible_categories = await sync_to_async(list)(
        Category.objects.filter(group=category, is_visible=True)
    )

    if visible_categories:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=cat.name, callback_data=f"category_{cat.id}")
                ] for cat in visible_categories
            ]
        )
        await message.answer("–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=keyboard)
    else:
        await message.answer("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.")



@router.message(lambda message: message.text == "–û—Ñ–µ—Ä—Ç–∞ –ø—Ä–æ–¥–∞–∂—É")
async def ofert(message: types.Message):
    document_path = "documents/offer.docx"  # –®–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    try:
        document = FSInputFile(document_path)
        await bot.send_document(chat_id=message.chat.id, document=document)
    except FileNotFoundError:
        await message.reply("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ñ–µ—Ä—Ç–∏ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


async def main():
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
